################ 테이블에서 열 선택 ################

1. emp테이블에서 사원번호, 이름, 월급 출력

SELECT empno, ename, sal FROM emp;

2. emp테이블에서 모든 열 출력

SELECT * FROM emp;

3. dept테이블의 모든 열을 출력하고 deptno를 한번 더 끝에 출력

SELECT *, deptno FROM dept;

################ 컬럼명 별명 사용 ################

1. 사원번호 사원이름 급여로 출력 

SELECT   empno AS 사원번호,
   ename AS 사원이름,
   sal AS 급여
FROM emp;

################ 연결하기 ################
- MySQL 에서 || 오류남
- CONCAT() 사용!

1. 이름과 급여를 한 셀에 붙여서 표시

SELECT CONCAT(ename, ' ', sal)
FROM emp;

2. ename님의 월급은 sal입니다.

SELECT CONCAT(ename, '님의 월급은 ', sal, '입니다.') AS 월급
FROM emp;

################ 중복제거 ################

1. emp테이블에서 job 중복 제거하여 출력

SELECT DISTINCT job FROM emp;

################ 정렬 ################

1. emp 테이블에서 이름 부서번호 월급을 부서번호 오름차순 월급 내림차순

SELECT ename, deptno, sal
FROM emp
ORDER BY deptno ASC, sal DESC;

SELECT ename, deptno, sal
FROM emp
ORDER BY 2 ASC, 3 DESC;

################ WHERE ################

1. emp테이블에서 이름, 부서번호, 월급 출력하는데 월급이 3000인 사람만 출력하시오.

SELECT ename, deptno, sal
FROM emp
WHERE sal = 3000;

2. 입사일이 82년 12월 22일인 사람 출력

SELECT *
FROM emp
WHERE hiredate = '1982-12-22';

3. 입사일이 82년 12월 22일 이후인 사람들 출력

SELECT *
FROM emp
WHERE hiredate >= '1982-12-22';

4. 연봉이 36000 이상인 사원들의 이름과 연봉을 출력

SELECT ename, sal * 12 AS 연봉
FROM emp
WHERE sal * 12 >= 36000;

5. 월급이 1000에서 3000 사이인 사원들의 이름과 월급 출력

SELECT ename, sal
FROM emp
WHERE sal BETWEEN 1000 AND 3000;

SELECT ename, sal
FROM emp
WHERE sal > 1000 
AND sal < 3000;

6. 이름에서 첫글자가 대문자 S로 시작하는 사원들의 이름과 월급 출력

SELECT ename, sal
FROM emp
WHERE ename LIKE 'S%';

7. 이름에서 두번째 글자가 대문자 M인 사원들의 이름과 월급 출력

SELECT ename, sal
FROM emp
WHERE ename LIKE '_M%';

8. 이메일 확인을 위해 @가 반드시 들어가는지 확인

SELECT ename, sal
FROM emp
WHERE ename LIKE '%@%';

################ NULL ################
- 데이터가 할당되지 않은 상태
- 알 수 없는 값이기 때문에 =연산자 사용 불가
- 0도 아니고 ' '도 아닌 값
- IS NULL 사용
- oracle NVL() -> MySQL IFNULL()

1. comm이 null인 사원

SELECT ename, comm
FROM emp
WHERE comm IS NULL;

2. NULL일 경우 comm을 0으로 계산하여 출력하시오.

SELECT comm, sal, IFNULL(comm,0)+sal AS 합계
FROM emp;

################ IN ################

1. 직업이 salesman, analyst, manager인 사람들만 이름, 월급, 직업 출력

SELECT ename, sal, job
FROM emp
WHERE job IN ('salesman', 'analyst', 'manager');

################ 논리 연산 ################

1. 직업이 salesman이고 월급이 1200 이상인 사원들의 이름, 월급, 직업 출력

SELECT ename, sal, job
FROM emp
WHERE job = 'salesman'
AND sal >= 1200;

################ 함수 ################
- 단일행 함수 : 하나의 행을 입력받아 하나의 행을 반환
- 다중행 함수 : 여러개의 행을 입력받아 하나의 행을 반환

1. 이름을 전부 대문자, 전부 소문자, 첫글자만 대문자

SELECT   UPPER(ename) 대문자, 
   LOWER(ename) 소문자,
   CONCAT
   (
      UPPER(LEFT(ename,1)), 
      LOWER(SUBSTR(ename,2))
   ) AS 첫글자대문자
FROM emp;

2. 이름을 출력하고 그 이름의 글자수 출력

SELECT   ename 이름,
   LENGTH(ename) 길이
FROM emp;

3. 이름에서 첫글자만 남기고 나머지를 전부 *로 변경

SELECT   ename 이름, 
   REPLACE(ename, SUBSTR(ename, 2), '*') 보안이름, 
   sal*12 연봉
FROM emp;

4. 이름과 월급을 출력하는데 월급을 자리수 10개로 하고 월급을 출력하고 나머지는 *로 출력

SELECT   ename 이름, RPAD(sal, 10, '*') 월급
FROM emp;

5. 이름과 월급을 출력하는데 월급 100마다 ■로 표기

SELECT   ename 이름, sal 월급, LPAD('',ROUND(sal/100),'■') 네모로채우기
FROM emp;

round(sal/100) 이 20이라면 전체 20자리를 확보한다.
20자리 중 ,'■'를 하나 출력하고 나머지 19자리에 ,'■'를 채워서 출력하여 20개를 최종 출력하게 된다.

#round

반올림 - 기본은 소수점 아래 1자리에서 소수점 위로 반올림

소수점 위에 1의 자리에서 반올림
SELECT ename,round(sal,-2)
FROM emp;

# TRUNC oracle truncate mysql
SELECT ename,truncate(sal,2)
FROM emp;

SELECT ename,trunc(sal,2)
FROM emp;

#25 mod

홀수/짝수/배수

사원번호가 홀수이면 1 짝수이면 0을 출력하세요

사원번호 홀짝

SELECT empno AS 사원번호,MOD(empno,2) AS홀짝
FROM emp;

SELECT empno AS 사원번호, ename AS 이름
FROM emp
WHERE MOD(empno,2) = 1;

2의 배수인 사람과 6의 배수인 사람의 명단을 출력하세요

SELECT empno AS 사원번호, ename AS 이름
FROM emp
WHERE MOD(empno,2)=0
OR MOD(empno,6)=0;

이름을 출력하고 입사일부터 오늘까지의 총 몇 달을 근무했는지

이름 근무월수
timestampdiff(월,전날짜,최근날짜)

SELECT ENAME 이름, TIMESTAMPDIFF(MONTH,hiredate,CURDATE())근무월수
FROM emp

now() 현재 날짜와 시간
CURDATE() 현재 날짜


INSERT INTO testtb (toy_id,toy_name) VALUES (2,'버즈');

입력 값을 생략하면 NULL값이 들어간다.

자동 증가 AUTO_INCREMENT

1부터 증가하는 값을 자동으로 입력해준다. insert에서는 열을 생략하고 입력한다.
주의할 점은 AUTO_INCREMENT으로 지정하는 열은 반드시 PRIMARY KEY로 지정해야만 한다.

CREATE TABLE testtb2 (
	toy_id INT AUTO_INCREMENT PRIMARY KEY,
	toy_name VARCHAR(4),
	age INT);

SELECT LAST_INSERT_ID();

ALTER TABLE testtb2 AUTO_INCREMENT=100

INSERT INTO testtb2 VALUES(NULL,'태지',24)

#테이블의 값을 다른 테이블로 입력하기.

SELECT COUNT(*)
FROM testtb2;

DESC sqldb.testtb2;

SELECT *
	FROM testtb2 LIMIT 3;

CREATE TABLE testtb3 (NAME VARCHAR(5),age INT)

INSERT INTO testtb3
SELECT toy_name,age FROM testtb2;

update 데이터 수정

UPDATE testtb2
	SET toy_name = '서울'
	WHERE toy_name = '영희';

SELECT * FROM testtb2 WHERE toy_id = 1;

DELETE
회원탈퇴