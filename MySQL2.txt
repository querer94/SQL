테이블명 product

product_name 	char(4) 		PK
cost		int		NN
make_date	date
company		char(5)
amount		int		NN

INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('tess', '나훈아', '경기 부천');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('hero', '임영웅', '서울 은평');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('iyou', '아이유', '인천 남구');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('jyp', '박진영', '경기 고양');

INSERT
UPDATE
DELETE

DELETE
	FROM emp
	WHERE emp_id = 1;

TINYINT -128 ~ 127
SMALLINT -?? ~32767
INT -?? ~ 21억
BIGINT 900경

CHAR 1~ 255 고정길이 자릿 수가 고정
              CHAR(10) 'abc' 10개를 일단 모두 확보 후
              3개 사용 후 7자리는 낭비	
VARCHAR 1~16000(?) 가변길이 문자형
	VARCHAR(10) 'abc' 3자리만 사용

join은 두 개의 테이블을 서로 묶어서 하나의 결과를 만드는 것

마켓 DB에서 회원 테이블과 구매 테이블

일대 다 관계 - ont to many
테이블은 하나로 구성되는 것보다 여러 정보를 주제에 따라 분리하여
저장하는 것이 효율적이다.
이 분리된 테이블은 서로 관계를 맺고 있다.
market_db는 회원 테이블의  아이디와 구매 테이블의 아이디가 일대 다 관계이다.
일대 관게란 한쪽 테이블에는 하나의 값만 존재하지만 연결된 다른 테이블에는
여러 개의 값이 존재할 수 있는 관계를 말한다.
즉 한 명의 회원이 구매를 여러 번 할 수 있다. 구매 테이블의 아이디는
기본 키가 아닌 외래 키 Foreign Key로 설정해야한다.
일대 다 관계는 주로 기본 키와 외래 키로 관계를 맺는다.
일대 다 관계를 또 다른 표현으로 'PK-FK관계'로 부르기도 한다.

회사원 테이블과 - 급여 테이블
학생 테이블과 - 성적 테이블
제품 테이블과 - 판매 테이블

우리 사이트에서 한 번이라도 구매한 기록이 있는 회원들에게 감사 선물을 제공하려고 한다.

한 번 이상 구매한 모든 회원의 정보를 출력하시오.

SELECT [열들의 목록 *]
FROM [1테이블]
	JOIN [2테이블]
	ON [조인 조건]
[WHERE 검색 조건]

구매 테이블에는 물건을 구매한 회원의 아이디와 물건의 정보만 있다.
이 물건의 구매자에 대한 정보는 회원 테이블에 있기 때문에 결합하는 것이 조인이다.
구매 테이블에서 어떤 아이디를 가진 사람의 정보를 얻기 위해서는 다음과 같이 검색할 수 있다.

내부 조인
SELECT DISTINCT M.mem_id, M.mem_name, M.addr
	FROM buy B
	JOIN member M
	ON B.mem_id = M.mem_id

외부 조인
내부 조인은 두 테이블에 모두 데이터가 있어야만 결과가 나온다.
외부 조인은 한 쪽만 데이터가 있어도 결과가 나온다.

두 테이블을 조인할 때 필요한 내용이 한 쪽 테이블에만 있어도 결과를 추출할 수 있다.


SELECT [열들의 목록 *]
FROM [1테이블]
	[LEFT/RIGHT/FULL] OUTER JOIN [2테이블]
	ON [조인 조건]
[WHERE 검색 조건]

LEFT OUTER JOIN 왼쪽 테이블의 내용은 모두 출력되어야한다.

회원으로 가입만 하고 한 번도 구매한 적이 없는 회원의 목록 출력

한 번도 구매하지 않았기 때문에 조인 된 결과의 물건 이름은 비어있을 것이다.

제약 조건

PRIMARY KEY
FOREIGN KEY
UNIQUE
CHECK
DEFAULT
NULL

테이블은 기본 키, 외래 키와 같은 제약 조건을 설정할 수 있다.
제약 조건은 테이블을 구성하는 핵심 개념으로 잘 활용하면 오류를 줄여 완전한 코드를 만들 수 있다.

테이블을 만들 때 구조에 필요한 제약 조건을 설정한다.
기본 키와 외래 키가 대표적인 제약 조건이다.
기본 키는 학번, 사번, 주민번호 등과 같은 고유한 데이터를 의미하는 열에 설정하고
외래키는 기본키와 연결되는 열에 지정한다.

고유키 PK는 중복되지 않는 열에 지정한다.

키를 입력하는 열에는 300cm를 넘는 사람은 없다.
실수로 300이 넘는 값을 입력하는 것을 방지하는 제약 조건을 체크 check라고 한다.
또 국적을 입력하는데 대부분이 한국인데 매번 입력하기가 귀찮다면
제약 조건으로 기본 값을 설정할 수 있다.
값을 반드시 꼭 입력해야하게 만드는 제약 조건을 NOT NULL 제약 조건이라 한다.

제약 조건이 많으면 데이터의 오류가 적고 튼튼해진다.

CONSTRAINT는 데이터의 무결성을 유지하기 위해 제한하는 조건이다.

이러한 결함을 미리 방지하기 위해 회원 테이블의 아이디를 기본 키 PRIMARY KEY로 지정하면
'중복을 허용하지 않고 NULL값도 허용하지 않음'으로 설정되어 실수로 중복된 아이디를
넣으려고 하면 입력조차 불가능해진다.

기본키 제약 조건
대부분의 테이블은 기본 키를 가져야한다. 없어도 테이블 구성은 가능하지만
실무에서는 기본 키를 설정해야 중복된 값을 허용하지 않게 된다.
기본 키는 테이블마다 1개만 가질 수 있다.
아이디, 주민번호, 이메일
테이블의 특성을 가장 잘 반영하는 열을 선택하는 것이 좋다.

열 이름 뒤에 PRIMARY KEY를 붙여서 기본 키로 설정한다.

1 PK 설정 방법 1 열 이름 끝에

CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int,		
make_date	date,
company		char(5),
amount		int		
);

3 PK 설정 방법 2 구문 제일 아래

CREATE TABLE member(
product_name 	char(4), 		
cost		int,		
make_date	date,
company		char(5),
amount		int,		
PRIMARY KEY(product_name)
);

3 PK 설정 방법 3 테이블을 만든 후 ALTER로 설정

ALTER TABLE member;
	ADD CONSTRAINT
	PRIMARY KEY (mem_id);

CREATE TABLE member(
product_name 	char(4), 		
cost		int,		
make_date	date,
company		char(5),
amount		int,		
CONSTRAINT PRIMARY PK_member_mem_id(mem_id)
);

#foreign key 외래 키 제약 조건은 두 테이블 사이의 관계를 연결해주고 그 결과 데이터의
무결성을 보장해주는 역할을 한다.
외래키가 설정된 열은 반드시 다른 테이블의 기본 키 동일하다.

기본키가 있는 테이블을 '기준 테이블' 외래 키가 있는 테이블은 '참조 테이블'이라고 부른다.

	기준 테이블		구매 테이블
	아이디			아이디
	PK			FK

참조 테이블이 참조하는 기준 테이블의 열은 반드시 기본 키
고유키로 설정되어 있어야 한다.

외래키 설정방법

CREATE TABLE member(
product_name 	char(4), 		
cost		int,		
make_date	date,
company		char(5),
amount		int,		
FOREIGN KEY(product_name) REFERENCES(member(mem_id)
);

CREATE TABLE member(
product_name 	char(4), 		
cost		int,		
make_date	date,
company		char(5),
amount		int,		
);
ALTER TABLE member
	ADD CONSTRAINT
	FOREIGN KEY(mem_id)
	REFERENCES member(mem_id);

기본키 - 외래키 관계가 설정되면
기준 테이블의 열은 변경되거나 삭제되지 않는다.

기준 테이블의 열 이름이 변경될 때 참조 테이블의 열 이름도 자동으로 변경되면 더 효율적일 것 같다.
즉, 회원 테이블의 BLK가 PINK로 변경되면 자동으로 구매 테이블의 BLK도 PINK로 변경되는 것이다.

고유 키 제약 조건 Unique
중복되지 않는 유일한 값을 입력해야 하는 조건

Unique 설정 방법 ,열 이름 끝에

CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int,		
make_date	date,
company		char(5) UNIQUE,
amount		int		
);

Check 제약 조건 - 입력할 때 데이터를 점검하는 기능, 어떤 열에 특정 값이 들어가지 않도록 하거나
'남/여' 둘 중의 하나만 입력되도록 할 수 있다.

1 PK 설정 방법 1 열 이름 끝에

CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int,		
make_date	date,
company		char(5) UNIQUE,
amount		int,
gender		char(5) CHECK (gender IN ('남','여')),		
height 		tinyint CHECK (height >= 100)
);


CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int,		
make_date	date,
company		char(5) UNIQUE,
amount		int,
gender		char(5) ,
height 		tinyint
);
ALTER TABLE member
ADD CONSTRAINT
CHECK (gender IN ('남','여')),	
CHECK (height >= 100);

기본 값 Default
값을 입력하지 않았을 때 자동으로 입력될 값을 미리 지정해 놓는 방법이다.

CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int,		
make_date	date,
company		char(5) DEFAULT'용감한형제들',
amount		int,
gender		char(5), 	
height 		tinyint
);

# 테이블을 만들고 난 뒤에 DEFAULT 제약 조건 설정

CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int,		
make_date	date,
company		char(5),
amount		int,
gender		char(5), 	
height 		tinyint
);
ALTER TABLE member
	ALTER COLUMN  company SET DEFAULT '용감한형제들';

널 값 비허용 NOT NULL

CREATE TABLE member(
product_name 	char(4) 		PRIMARY KEY,
cost		int NOT NULL,	
make_date	date,
company		char(5),
amount		int,
gender		char(5), 	
height 		tinyint
);

# View 가상의 테이블
일반 사용자의 입장에서는 테이블과 동일하게 보인다.
그렇다면 왜 뷰를 사용할까.. 테이블의 필요한 내용만 골라서 보이도록 할 수 있다.

뷰는 테이블과 아주 밀접하게 연관되어 잇다. 뷰는 한 번 생성하면 테이블이라고 생각해도 될 정도로 테이블과 동일한
개체로 취급한다.

뷰는 실제 데이터를 가지고 있지 않다. 뷰에 접근하는 순간 select가 실행되고 그 결과가 화면에 출력되는 방식이다.
뷰는 단순 뷰와 복합 뷰로 나뉜다. 단순 뷰는 하나의 테이블과 연관된 뷰를 의미하고 복합 뷰는 2개 이상의
테이블과 연관된 뷰를 말한다.

뷰의 이름만 보고서도 어떤 테이블과 연계된 뷰인지 알 수 있도록 v_접두어를 사용하여 이름을 만든다.
v_테이블 명

CREATE VIEW v_이름
AS 
	SELECT 구문;

CREATE VIEW v_member
AS
		SELECT mem_id, mem_name, addr
		FROM market_db.member;

필요한 열만 추출하여 보거나 조건식을 넣을 수도 있다.
결과는 테이블에서 추출하여 보는 것과 동일하다.

뷰를 많이 사용하게 되는 이유...

1.보안 Security

인터넷 홈쇼핑, 회원의 정보 확인, 알바, 모든 정보가 담긴 테이블 전부 사용할 수 있도록 하면
일부 정보에만 접근을 허용하여 불필요한 정보 노출을 막을 수 있다.

2.복잡한 SQL을 단순하게 만들 수 있다.

뷰 작성 시 조건을 사용하게 되면 그 뷰를 통한 또 다른 SQL 구문은 좀 더 단순해지는 효과를 얻을 수 있다.

뷰의 실제 사용
실무에서는 좀 더 복잡하게 사용된다.

뷰 삭제
drop view v_member;

뷰 구조보기
describe v_viewtest1;

뷰로 데이터 수정/삭제

UPDATE v_viewtest1
	SET `Member Name` = 'Balck Pink'
    WHERE `Member ID` = 'BLK';

DELETE
	FROM v_viewtest1
    WHERE `Member ID` = 'APN';

